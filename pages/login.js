import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/router'
import Head from 'next/head';
import { useDispatch, useSelector } from "react-redux";

import Avatar from '@mui/material/Avatar';
import Button from '@mui/material/Button';
import CssBaseline from '@mui/material/CssBaseline';
import TextField from '@mui/material/TextField';
import FormControlLabel from '@mui/material/FormControlLabel';
import Checkbox from '@mui/material/Checkbox';
import Paper from '@mui/material/Paper';
import Box from '@mui/material/Box';
import Grid from '@mui/material/Grid';
import { Icon, IconButton, InputAdornment, Link } from '@mui/material';
import Typography from '@mui/material/Typography';

import SnackBar from '../components/GeneralComponents/Utilities/SnackBar';
import Layout from '../components/GeneralComponents/Blocks/Layout';

import userActions from '../redux/user/user.actions';
import { setAlert } from '../redux/alert/alert.actions';

function Copyright() {
    return (
        <Typography variant="body2" color="textSecondary" align="center">
            {'Copyright Â© '}
            <Link color="inherit" href="https://material-ui.com/">
                Your Website
            </Link>{' '}
            {new Date().getFullYear()}
            {'.'}
        </Typography>
    );
}


const LoginPage = () => {

    const router = useRouter()
    const [userCredentials, setUserCredentials] = useState({ email: "", password: "" });
    const [usersInfo, setUsersInfo] = useState([])
    const { email, password } = userCredentials;
    const [showInactiveModal, setShowInactiveModal] = useState(false);
    const [hiddenPassword, setHiddenPassword] = useState(true);

    const loading = useSelector((state) => state.userReducer.loading);
    const dispatch = useDispatch();
    const userReducer = useSelector((state) => state.userReducer);


    useEffect(() => {
        if (userReducer.currentUser) {
            router.push("/dashboard")
        }
    }, [dispatch, router, userReducer.currentUser])

    const onClickLogin = async () => {
        let flagWhites = true;
        let flagGeneral = true;

        if (password === "" || email === "") {
            dispatch(setAlert({ msg: "Please complete whitespaces" }));
        }else{
            const data = await dispatch(userActions.login({ email, password }))
            if (data) {
                if (data.token) {
                    router.push("/dashboard")
                } 
            }
        }
       
    }
    const handleChange = (event) => {
        const { value, name } = event.target;
        setUserCredentials({ ...userCredentials, [name]: value })
    }

    const handleKeyPress = (event) => {
        if (event.key === 'Enter') {
            onClickLogin()
        }
    }

    return (
        <>
            <Head>
                <title>Virtual PT Login</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
                <link href="https://fonts.googleapis.com/icon?family=Material+Icons"
                    rel="stylesheet" />
            </Head>
            {!userReducer.currentUser ?
                <Grid container component="main" sx={{
                    height: '100vh'
                }}>
                    <CssBaseline />
                    <Grid item xs={false} sm={4} md={7}
                        sx={{
                            backgroundImage: 'url(https://source.unsplash.com/random)',
                            backgroundRepeat: 'no-repeat',
                            backgroundColor: (t) =>
                                t.palette.mode === 'light' ? t.palette.grey[50] : t.palette.grey[900],
                            backgroundSize: 'cover',
                            backgroundPosition: 'center',
                        }}
                    />
                    <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>
                        <Box sx={{
                            my: 8,
                            mx: 4,
                            display: 'flex',
                            flexDirection: 'column',
                            alignItems: 'center',
                        }}>
                            <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>
                                <Icon>lock</Icon>
                            </Avatar>
                            <Typography component="h1" variant="h5">Welcome</Typography>
                            <Box pt={1}>
                                <TextField
                                    variant="outlined"
                                    margin="normal"
                                    required
                                    fullWidth
                                    id="email"
                                    label="Email Address"
                                    name="email"
                                    autoComplete="email"
                                    autoFocus
                                    onChange={handleChange}
                                />
                                <TextField
                                    variant="outlined"
                                    margin="normal"
                                    required
                                    fullWidth
                                    name="password"
                                    label="Password"
                                    type={hiddenPassword ? 'password' : 'text'}
                                    id="password"
                                    autoComplete="current-password"
                                    onChange={handleChange}
                                    onKeyPress={handleKeyPress}
                                    InputProps={{
                                        endAdornment: (
                                            <InputAdornment position="end" >
                                                <IconButton
                                                    onClick={() => setHiddenPassword(!hiddenPassword)}
                                                >
                                                    {hiddenPassword ? <Icon>visibility_off</Icon> : <Icon>visibility</Icon>}
                                                </IconButton>
                                            </InputAdornment>
                                        )
                                    }}
                                />
                                <FormControlLabel
                                    control={<Checkbox value="remember" color="primary" />}
                                    label="Remember me"
                                />
                                <Button
                                    fullWidth
                                    variant="contained"
                                    color="primary"
                                    sx={{ mt: 3, mb: 2 }}
                                    onClick={onClickLogin}
                                    disabled={loading}
                                >Login</Button>
                                <Grid container>
                                    <Grid item xs>
                                        <Link href="#" variant="body2">
                                            Forgot password?
                                        </Link>
                                    </Grid>
                                    <Grid item>
                                        <Link href="#" variant="body2">
                                            {"Don't have an account? Sign Up"}
                                        </Link>
                                    </Grid>
                                </Grid>
                                <Box mt={5}>
                                    <Copyright />
                                </Box>
                            </Box>
                        </Box>
                    </Grid>
                </Grid >
                :
                <Typography>Loading dashboard...</Typography>
            }
            <SnackBar />
        </>
    );
}

LoginPage.getLayout = (page) => (
    <Layout>
        {page}
    </Layout>
)

export default LoginPage;